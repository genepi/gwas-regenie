nextflow_process {

    name "Test Process FILTER_RESULTS"
    script "modules/local/filter_results.nf"
    process "FILTER_RESULTS"

    test("Should output only 117 filtered lines") {

        when {
            params {
                annotation_min_log10p = 1
            }
            process {
                """
                input[0] = Channel.of( ['Y1', '$baseDir/tests/input/filter_results/regenie_step2_example_Y1.regenie.gz'], ['Y2', '$baseDir/tests/input/filter_results/regenie_step2_example_Y2.regenie.gz'])
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            }

        }

        test("Should output all regenie lines") {

                when {
                    params {
                        annotation_min_log10p = 0
                    }
                    process {
                        """
                        input[0] = Channel.of( ['Y1', "$baseDir/tests/input/filter_results/regenie_step2_example_Y1.regenie.gz"], ['Y2', "$baseDir/tests/input/filter_results/regenie_step2_example_Y2.regenie.gz"])
                        """
                    }
                }

                then {
                    assert process.success
                    assert snapshot(process.out).match()

                }

        }

        test("Should output an empty file") {

                when {
                    params {
                        annotation_min_log10p = 100
                    }
                    process {
                        """
                        input[0] = Channel.of( ['Y1', "$baseDir/tests/input/filter_results/regenie_step2_example_Y1.regenie.gz"], ['Y2', "$baseDir/tests/input/filter_results/regenie_step2_example_Y2.regenie.gz"])
                        """
                    }
                }

                then {
                    assert process.success
                    assert snapshot(process.out).match()
                    with(process.out){
                        with(results_filtered){
                            def lines = path(get(0).get(1)).readLinesGzip()
                            assert (lines.size() == 0)
                        }
                    }
                }

        }
}